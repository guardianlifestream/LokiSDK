// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LokiSDKExtention
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
import Foundation
import OSLog
import Swift
import _Concurrency
import _StringProcessing
public struct Battery : Swift.Codable {
  public let isCharging: Swift.Bool?
  public let remainingCharge: Swift.Int?
  public init(isCharging: Swift.Bool?, remainingCharge: Swift.Int?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LokiDevice : Swift.Codable {
  public let id: Swift.String
  public var symmetricKey: Swift.String
  public init(id: Swift.String, symmetricKey: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.Bundle {
  public var appName: Swift.String {
    get
  }
}
public protocol ILokiDateWrapper {
  var currentDate: Foundation.Date { get }
  func getLocalDateTimeString(dateTime: Foundation.Date) -> Swift.String
}
public class LokiLoggerService : LokiSDKExtention.ILokiLoggerService {
  public init(dateTimeWrapper: LokiSDKExtention.ILokiDateWrapper)
  public func logDebug(message: Swift.String)
  public func logInformation(message: Swift.String)
  public func logWarning(message: Swift.String)
  public func logError(message: Swift.String)
  @objc deinit
}
public struct Coordinates : Swift.Codable {
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(latitude: Swift.Double?, longitude: Swift.Double?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.UserDefaults {
  public static let group: Foundation.UserDefaults?
}
public struct MlvInfo : Swift.Codable, Swift.Sendable {
  public let isOn: Swift.Bool
  public let sendLocationImmediately: Swift.Bool
  public let correlationID: Swift.String?
  public let timeStamp: Foundation.Date
  public init(isOn: Swift.Bool, sendLocationImmediately: Swift.Bool, correlationID: Swift.String?, timeStamp: Foundation.Date)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum AppMode : Swift.Int16, Swift.Codable {
  case foreground
  case background
  case terminated
  case locationpush
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
public struct SendLocationRequest : Swift.Codable {
  public let clientId: Swift.String
  public let userId: Swift.String
  public let deviceId: Swift.String
  public let coordinates: LokiSDKExtention.Coordinates?
  public let recordedAtUTC: Foundation.Date?
  public let altitude: Swift.Double?
  public let verticalAccuracy: Swift.Double?
  public let horizontalAccuracy: Swift.Double?
  public let sdkVersion: Swift.String?
  public let speed: Swift.Double?
  public let battery: LokiSDKExtention.Battery?
  public let headingDirection: Swift.Double?
  public let activity: Swift.String?
  public let isSimulated: Swift.Bool
  public let appMode: LokiSDKExtention.AppMode
  public init(clientId: Swift.String, userId: Swift.String, deviceId: Swift.String, coordinates: LokiSDKExtention.Coordinates?, recordedAtUTC: Foundation.Date?, altitude: Swift.Double?, verticalAccuracy: Swift.Double?, horizontalAccuracy: Swift.Double?, sdkVersion: Swift.String?, speed: Swift.Double?, battery: LokiSDKExtention.Battery?, headingDirection: Swift.Double?, activity: Swift.String?, isSimulated: Swift.Bool, appMode: LokiSDKExtention.AppMode)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LokiDateWrapper : LokiSDKExtention.ILokiDateWrapper {
  public var currentDate: Foundation.Date {
    get
  }
  public func getLocalDateTimeString(dateTime: Foundation.Date) -> Swift.String
  @objc deinit
}
public protocol LokiApiManagerInterface {
  var authKey: Swift.String? { get set }
  #if compiler(>=5.3) && $AsyncAwait
  func sendLocation(location: LokiSDKExtention.SendLocationRequest) async throws -> Swift.Bool
  #endif
}
public protocol ILokiLoggerService {
  func logInformation(message: Swift.String)
  func logWarning(message: Swift.String)
  func logError(message: Swift.String)
  func logDebug(message: Swift.String)
}
public enum LokiAPIError : Swift.Error {
  case unknown
  case authKeyNotSet
  public static func == (a: LokiSDKExtention.LokiAPIError, b: LokiSDKExtention.LokiAPIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class LokiAPIManager : LokiSDKExtention.LokiApiManagerInterface {
  public var authKey: Swift.String?
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public func sendLocation(location: LokiSDKExtention.SendLocationRequest) async throws -> Swift.Bool
  #endif
  @objc deinit
}
public enum SendStatus : Swift.Int16, Swift.Codable {
  case unknown
  case mqttSend
  case httpSend
  case mqttFailed
  case httpFailed
  case httpSendEx
  case httpFailedEx
  case ignored
  public func description() -> Swift.String
  public init?(rawValue: Swift.Int16)
  public typealias RawValue = Swift.Int16
  public var rawValue: Swift.Int16 {
    get
  }
}
public struct LocationInfo : Swift.Codable {
  public var locationId: Swift.String
  public let location: CoreLocation.CLLocation
  public let appMode: LokiSDKExtention.AppMode
  public init(locationId: Swift.String, location: CoreLocation.CLLocation, appMode: LokiSDKExtention.AppMode)
  public init(location: CoreLocation.CLLocation, appMode: LokiSDKExtention.AppMode, isMLVLocation: Swift.Bool = false)
  public init(from decoder: Swift.Decoder) throws
  public func update(clientId: Swift.String) -> LokiSDKExtention.LocationInfo
  public func encode(to encoder: Swift.Encoder) throws
}
extension CoreLocation.CLLocation : Swift.Encodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case latitude, longitude, altitude, horizontalAccuracy, verticalAccuracy, speed, course, timestamp, speedAccuracy, courseAccuracy, sourceInformation
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct LocationWrapper : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 15.0, *)
extension CoreLocation.CLLocationSourceInformation : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 15.0, *)
public struct CLLocationSourceInformationWrapper : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension LokiSDKExtention.AppMode : Swift.Equatable {}
extension LokiSDKExtention.AppMode : Swift.Hashable {}
extension LokiSDKExtention.AppMode : Swift.RawRepresentable {}
extension LokiSDKExtention.LokiAPIError : Swift.Equatable {}
extension LokiSDKExtention.LokiAPIError : Swift.Hashable {}
extension LokiSDKExtention.SendStatus : Swift.Equatable {}
extension LokiSDKExtention.SendStatus : Swift.Hashable {}
extension LokiSDKExtention.SendStatus : Swift.RawRepresentable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.Equatable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.Hashable {}
extension CoreLocation.CLLocation.CodingKeys : Swift.RawRepresentable {}
